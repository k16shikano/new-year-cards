% /a [0 2 0 2 0 2 0 2 2 2 2 2] def % test

/new-with-last-three % arr -> arr
{% def
    dup dup length array dup % org \ org \ new \ new
    3 2 roll dup % org \ new \ new \ org \ org
    length 3 sub % org \ new \ new \ org \ i
    dup 3 -2 roll % org \ new \ new \ i \ org \ i
    3 getinterval % org \ new \ new \ i \ org/3    
    putinterval
} def

/scan-and-replace % arr -> replaced-arr
{% def
    new-with-last-three
    0 1 2 index length 4 sub {% for
        dup % array \ result \ array index \ array index
        3 index exch get % array \ result \ array index \ array value
        3 index 2 index 4 getinterval % array \ result \ array index \ array value \ ****
        dup is-the-year
        {% ifelse
            4 -2 roll exch dup % array \ array value \ **** \ array index \ result \ result 
            4 -2 roll exch     % array \ array value \ result \ result \ array index \ ****
            2 index 2 index get type /arraytype ne
            { % ifelse
                highlighted-year
                putinterval % array \ array value \ result
                exch pop % array \ result
            }{ % else
                pop pop pop exch pop
            } ifelse
        }{% else
            3 index 3 index get null eq
            { % ifelse
                pop 3 copy put pop pop
            }{ % else
                pop pop pop
            } ifelse
        } ifelse
    } for % array \ result
    exch pop
} def

/is-the-year % arr -> bool
{% def
    true
    0 1 3 {% for
        dup
        [2 0 2 0] exch get
        3 index 2 index get
        eq exch pop and
    } for
    exch pop
} def

/highlighted-year % arr -> arr
{% def
    pop
    [[2] [0] [2] [0]]
} def

/two-or-zero
{% def
    rand 2 mod 0 eq {2 == } {0 == } ifelse
} def

/rand-array % length -> array
{% def
    dup array dup % length \ array \ array 
    0 1 5 4 roll 1 sub { % for
        rand 2 mod 2 mul put
        dup
    } for
} def

